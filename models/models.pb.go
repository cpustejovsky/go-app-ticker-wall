// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: models.proto

package models

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Ticker is used to update a tickers information ( leader -> follower ).
type Ticker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticker                string  `protobuf:"bytes,1,opt,name=Ticker,proto3" json:"Ticker,omitempty"`
	CompanyName           string  `protobuf:"bytes,2,opt,name=CompanyName,proto3" json:"CompanyName,omitempty"`
	OutstandingShares     int64   `protobuf:"varint,3,opt,name=OutstandingShares,proto3" json:"OutstandingShares,omitempty"`
	Price                 float64 `protobuf:"fixed64,4,opt,name=Price,proto3" json:"Price,omitempty"`
	MarketCap             float64 `protobuf:"fixed64,5,opt,name=MarketCap,proto3" json:"MarketCap,omitempty"`
	PriceChangePercentage float64 `protobuf:"fixed64,6,opt,name=PriceChangePercentage,proto3" json:"PriceChangePercentage,omitempty"`
	PreviousClosePrice    float64 `protobuf:"fixed64,7,opt,name=PreviousClosePrice,proto3" json:"PreviousClosePrice,omitempty"`
	Index                 int32   `protobuf:"varint,8,opt,name=Index,proto3" json:"Index,omitempty"`
	Img                   int32   `protobuf:"varint,9,opt,name=Img,proto3" json:"Img,omitempty"`
	ImgData               []byte  `protobuf:"bytes,10,opt,name=ImgData,proto3" json:"ImgData,omitempty"`
	Aggs                  []*Agg  `protobuf:"bytes,11,rep,name=Aggs,proto3" json:"Aggs,omitempty"`
}

func (x *Ticker) Reset() {
	*x = Ticker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ticker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ticker) ProtoMessage() {}

func (x *Ticker) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ticker.ProtoReflect.Descriptor instead.
func (*Ticker) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{0}
}

func (x *Ticker) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *Ticker) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *Ticker) GetOutstandingShares() int64 {
	if x != nil {
		return x.OutstandingShares
	}
	return 0
}

func (x *Ticker) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Ticker) GetMarketCap() float64 {
	if x != nil {
		return x.MarketCap
	}
	return 0
}

func (x *Ticker) GetPriceChangePercentage() float64 {
	if x != nil {
		return x.PriceChangePercentage
	}
	return 0
}

func (x *Ticker) GetPreviousClosePrice() float64 {
	if x != nil {
		return x.PreviousClosePrice
	}
	return 0
}

func (x *Ticker) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Ticker) GetImg() int32 {
	if x != nil {
		return x.Img
	}
	return 0
}

func (x *Ticker) GetImgData() []byte {
	if x != nil {
		return x.ImgData
	}
	return nil
}

func (x *Ticker) GetAggs() []*Agg {
	if x != nil {
		return x.Aggs
	}
	return nil
}

// Agg is an individual aggregate used to generate graphs.
type Agg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price     float64 `protobuf:"fixed64,1,opt,name=Price,proto3" json:"Price,omitempty"`
	Volume    int32   `protobuf:"varint,2,opt,name=Volume,proto3" json:"Volume,omitempty"`
	Timestamp int64   `protobuf:"varint,3,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
}

func (x *Agg) Reset() {
	*x = Agg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Agg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Agg) ProtoMessage() {}

func (x *Agg) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Agg.ProtoReflect.Descriptor instead.
func (*Agg) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{1}
}

func (x *Agg) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Agg) GetVolume() int32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *Agg) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// PriceUpdate is the message sent when a price updates for a ticker.
type PriceUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticker string  `protobuf:"bytes,1,opt,name=Ticker,proto3" json:"Ticker,omitempty"`
	Price  float64 `protobuf:"fixed64,2,opt,name=Price,proto3" json:"Price,omitempty"`
}

func (x *PriceUpdate) Reset() {
	*x = PriceUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceUpdate) ProtoMessage() {}

func (x *PriceUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceUpdate.ProtoReflect.Descriptor instead.
func (*PriceUpdate) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{2}
}

func (x *PriceUpdate) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *PriceUpdate) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

// Announcement is used to display a special message on the display.
type Announcement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message           string `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	AnnouncementType  int32  `protobuf:"varint,2,opt,name=AnnouncementType,proto3" json:"AnnouncementType,omitempty"`
	ShowAtTimestampMS int64  `protobuf:"varint,3,opt,name=ShowAtTimestampMS,proto3" json:"ShowAtTimestampMS,omitempty"`
	LifespanMS        int64  `protobuf:"varint,4,opt,name=LifespanMS,proto3" json:"LifespanMS,omitempty"`
	Animation         int32  `protobuf:"varint,5,opt,name=Animation,proto3" json:"Animation,omitempty"`
}

func (x *Announcement) Reset() {
	*x = Announcement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Announcement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Announcement) ProtoMessage() {}

func (x *Announcement) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Announcement.ProtoReflect.Descriptor instead.
func (*Announcement) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{3}
}

func (x *Announcement) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Announcement) GetAnnouncementType() int32 {
	if x != nil {
		return x.AnnouncementType
	}
	return 0
}

func (x *Announcement) GetShowAtTimestampMS() int64 {
	if x != nil {
		return x.ShowAtTimestampMS
	}
	return 0
}

func (x *Announcement) GetLifespanMS() int64 {
	if x != nil {
		return x.LifespanMS
	}
	return 0
}

func (x *Announcement) GetAnimation() int32 {
	if x != nil {
		return x.Animation
	}
	return 0
}

// Screen contains all screen information about an individual screen.
type Screen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID   string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Width  int32  `protobuf:"varint,2,opt,name=Width,proto3" json:"Width,omitempty"`
	Height int32  `protobuf:"varint,3,opt,name=Height,proto3" json:"Height,omitempty"`
	Index  int32  `protobuf:"varint,4,opt,name=Index,proto3" json:"Index,omitempty"`
}

func (x *Screen) Reset() {
	*x = Screen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Screen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Screen) ProtoMessage() {}

func (x *Screen) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Screen.ProtoReflect.Descriptor instead.
func (*Screen) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{4}
}

func (x *Screen) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *Screen) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Screen) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Screen) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

// ScreenCluster contains information about the whole screen cluster.
type ScreenCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Settings *PresentationSettings `protobuf:"bytes,1,opt,name=Settings,proto3" json:"Settings,omitempty"`
	Screens  []*Screen             `protobuf:"bytes,2,rep,name=Screens,proto3" json:"Screens,omitempty"`
}

func (x *ScreenCluster) Reset() {
	*x = ScreenCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScreenCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenCluster) ProtoMessage() {}

func (x *ScreenCluster) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenCluster.ProtoReflect.Descriptor instead.
func (*ScreenCluster) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{5}
}

func (x *ScreenCluster) GetSettings() *PresentationSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *ScreenCluster) GetScreens() []*Screen {
	if x != nil {
		return x.Screens
	}
	return nil
}

type PresentationSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TickerBoxWidth      int32 `protobuf:"varint,1,opt,name=TickerBoxWidth,proto3" json:"TickerBoxWidth,omitempty"`
	ScrollSpeed         int32 `protobuf:"varint,2,opt,name=ScrollSpeed,proto3" json:"ScrollSpeed,omitempty"`
	UpColor             *RGBA `protobuf:"bytes,3,opt,name=UpColor,proto3" json:"UpColor,omitempty"`
	DownColor           *RGBA `protobuf:"bytes,4,opt,name=DownColor,proto3" json:"DownColor,omitempty"`
	BGColor             *RGBA `protobuf:"bytes,5,opt,name=BGColor,proto3" json:"BGColor,omitempty"`
	FontColor           *RGBA `protobuf:"bytes,6,opt,name=FontColor,proto3" json:"FontColor,omitempty"`
	TickerBoxBGColor    *RGBA `protobuf:"bytes,7,opt,name=TickerBoxBGColor,proto3" json:"TickerBoxBGColor,omitempty"`
	ShowLogos           bool  `protobuf:"varint,8,opt,name=ShowLogos,proto3" json:"ShowLogos,omitempty"`
	ShowFPS             bool  `protobuf:"varint,9,opt,name=ShowFPS,proto3" json:"ShowFPS,omitempty"`
	AnimationDurationMS int32 `protobuf:"varint,10,opt,name=AnimationDurationMS,proto3" json:"AnimationDurationMS,omitempty"`
	PerTickUpdates      bool  `protobuf:"varint,11,opt,name=PerTickUpdates,proto3" json:"PerTickUpdates,omitempty"`
}

func (x *PresentationSettings) Reset() {
	*x = PresentationSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PresentationSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresentationSettings) ProtoMessage() {}

func (x *PresentationSettings) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresentationSettings.ProtoReflect.Descriptor instead.
func (*PresentationSettings) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{6}
}

func (x *PresentationSettings) GetTickerBoxWidth() int32 {
	if x != nil {
		return x.TickerBoxWidth
	}
	return 0
}

func (x *PresentationSettings) GetScrollSpeed() int32 {
	if x != nil {
		return x.ScrollSpeed
	}
	return 0
}

func (x *PresentationSettings) GetUpColor() *RGBA {
	if x != nil {
		return x.UpColor
	}
	return nil
}

func (x *PresentationSettings) GetDownColor() *RGBA {
	if x != nil {
		return x.DownColor
	}
	return nil
}

func (x *PresentationSettings) GetBGColor() *RGBA {
	if x != nil {
		return x.BGColor
	}
	return nil
}

func (x *PresentationSettings) GetFontColor() *RGBA {
	if x != nil {
		return x.FontColor
	}
	return nil
}

func (x *PresentationSettings) GetTickerBoxBGColor() *RGBA {
	if x != nil {
		return x.TickerBoxBGColor
	}
	return nil
}

func (x *PresentationSettings) GetShowLogos() bool {
	if x != nil {
		return x.ShowLogos
	}
	return false
}

func (x *PresentationSettings) GetShowFPS() bool {
	if x != nil {
		return x.ShowFPS
	}
	return false
}

func (x *PresentationSettings) GetAnimationDurationMS() int32 {
	if x != nil {
		return x.AnimationDurationMS
	}
	return 0
}

func (x *PresentationSettings) GetPerTickUpdates() bool {
	if x != nil {
		return x.PerTickUpdates
	}
	return false
}

// Update encapsulates different update messages.
type Update struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdateType           int32                 `protobuf:"varint,1,opt,name=UpdateType,proto3" json:"UpdateType,omitempty"`
	PriceUpdate          *PriceUpdate          `protobuf:"bytes,2,opt,name=PriceUpdate,proto3" json:"PriceUpdate,omitempty"`
	Announcement         *Announcement         `protobuf:"bytes,3,opt,name=Announcement,proto3" json:"Announcement,omitempty"`
	ScreenCluster        *ScreenCluster        `protobuf:"bytes,4,opt,name=ScreenCluster,proto3" json:"ScreenCluster,omitempty"`
	Ticker               *Ticker               `protobuf:"bytes,5,opt,name=Ticker,proto3" json:"Ticker,omitempty"`
	PresentationSettings *PresentationSettings `protobuf:"bytes,6,opt,name=PresentationSettings,proto3" json:"PresentationSettings,omitempty"`
}

func (x *Update) Reset() {
	*x = Update{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Update) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Update) ProtoMessage() {}

func (x *Update) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Update.ProtoReflect.Descriptor instead.
func (*Update) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{7}
}

func (x *Update) GetUpdateType() int32 {
	if x != nil {
		return x.UpdateType
	}
	return 0
}

func (x *Update) GetPriceUpdate() *PriceUpdate {
	if x != nil {
		return x.PriceUpdate
	}
	return nil
}

func (x *Update) GetAnnouncement() *Announcement {
	if x != nil {
		return x.Announcement
	}
	return nil
}

func (x *Update) GetScreenCluster() *ScreenCluster {
	if x != nil {
		return x.ScreenCluster
	}
	return nil
}

func (x *Update) GetTicker() *Ticker {
	if x != nil {
		return x.Ticker
	}
	return nil
}

func (x *Update) GetPresentationSettings() *PresentationSettings {
	if x != nil {
		return x.PresentationSettings
	}
	return nil
}

// RGBA is how we represent colors.
type RGBA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Red   int32 `protobuf:"varint,1,opt,name=Red,proto3" json:"Red,omitempty"`
	Green int32 `protobuf:"varint,2,opt,name=Green,proto3" json:"Green,omitempty"`
	Blue  int32 `protobuf:"varint,3,opt,name=Blue,proto3" json:"Blue,omitempty"`
	Alpha int32 `protobuf:"varint,4,opt,name=Alpha,proto3" json:"Alpha,omitempty"`
}

func (x *RGBA) Reset() {
	*x = RGBA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RGBA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RGBA) ProtoMessage() {}

func (x *RGBA) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RGBA.ProtoReflect.Descriptor instead.
func (*RGBA) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{8}
}

func (x *RGBA) GetRed() int32 {
	if x != nil {
		return x.Red
	}
	return 0
}

func (x *RGBA) GetGreen() int32 {
	if x != nil {
		return x.Green
	}
	return 0
}

func (x *RGBA) GetBlue() int32 {
	if x != nil {
		return x.Blue
	}
	return 0
}

func (x *RGBA) GetAlpha() int32 {
	if x != nil {
		return x.Alpha
	}
	return 0
}

// Group of Tickers
type Tickers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tickers []*Ticker `protobuf:"bytes,1,rep,name=Tickers,proto3" json:"Tickers,omitempty"`
}

func (x *Tickers) Reset() {
	*x = Tickers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tickers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tickers) ProtoMessage() {}

func (x *Tickers) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tickers.ProtoReflect.Descriptor instead.
func (*Tickers) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{9}
}

func (x *Tickers) GetTickers() []*Ticker {
	if x != nil {
		return x.Tickers
	}
	return nil
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{10}
}

var File_models_proto protoreflect.FileDescriptor

var file_models_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x22, 0xed, 0x02, 0x0a, 0x06, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x4f,
	0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x4f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x70, 0x12, 0x34, 0x0a,
	0x15, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x12, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x6d, 0x67,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x49, 0x6d, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x49,
	0x6d, 0x67, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x49, 0x6d,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x04, 0x41, 0x67, 0x67, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x41, 0x67, 0x67,
	0x52, 0x04, 0x41, 0x67, 0x67, 0x73, 0x22, 0x51, 0x0a, 0x03, 0x41, 0x67, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x3b, 0x0a, 0x0b, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x0c, 0x41, 0x6e, 0x6e, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x41, 0x6e, 0x6e,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a,
	0x11, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x4d, 0x53, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x53, 0x12, 0x1e, 0x0a, 0x0a, 0x4c,
	0x69, 0x66, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x4d, 0x53, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x4c, 0x69, 0x66, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x4d, 0x53, 0x12, 0x1c, 0x0a, 0x09, 0x41,
	0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x60, 0x0a, 0x06, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a,
	0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x73, 0x0a, 0x0d, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x08,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x28, 0x0a, 0x07, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x07, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73,
	0x22, 0xd4, 0x03, 0x0a, 0x14, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x42, 0x6f, 0x78, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x42, 0x6f, 0x78, 0x57, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x07, 0x55, 0x70, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x52, 0x47,
	0x42, 0x41, 0x52, 0x07, 0x55, 0x70, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x09, 0x44,
	0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x52, 0x47, 0x42, 0x41, 0x52, 0x09, 0x44, 0x6f,
	0x77, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x07, 0x42, 0x47, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x52, 0x47, 0x42, 0x41, 0x52, 0x07, 0x42, 0x47, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x2a, 0x0a, 0x09, 0x46, 0x6f, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x52, 0x47, 0x42, 0x41,
	0x52, 0x09, 0x46, 0x6f, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x10, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x42, 0x6f, 0x78, 0x42, 0x47, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x52,
	0x47, 0x42, 0x41, 0x52, 0x10, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x42, 0x6f, 0x78, 0x42, 0x47,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x68, 0x6f, 0x77, 0x4c, 0x6f, 0x67,
	0x6f, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x53, 0x68, 0x6f, 0x77, 0x4c, 0x6f,
	0x67, 0x6f, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x68, 0x6f, 0x77, 0x46, 0x50, 0x53, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x68, 0x6f, 0x77, 0x46, 0x50, 0x53, 0x12, 0x30, 0x0a,
	0x13, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x53, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x41, 0x6e, 0x69, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x53, 0x12,
	0x26, 0x0a, 0x0e, 0x50, 0x65, 0x72, 0x54, 0x69, 0x63, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x50, 0x65, 0x72, 0x54, 0x69, 0x63, 0x6b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0xd0, 0x02, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x41, 0x6e, 0x6e,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0d, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x0d, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x26, 0x0a, 0x06, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x52, 0x06, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x14, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x14, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x58, 0x0a, 0x04, 0x52, 0x47,
	0x42, 0x41, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x52, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x42, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x42, 0x6c, 0x75, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x41,
	0x6c, 0x70, 0x68, 0x61, 0x22, 0x33, 0x0a, 0x07, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12,
	0x28, 0x0a, 0x07, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x52, 0x07, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x32, 0xef, 0x02, 0x0a, 0x06, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x31, 0x0a,
	0x0b, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x1a, 0x0e, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x00, 0x30, 0x01,
	0x12, 0x2e, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x0d,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0f, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x22, 0x00,
	0x12, 0x5a, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1c,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x1c, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x08,
	0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x14,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0d, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x15, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x22, 0x00, 0x12, 0x30, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x12, 0x0e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x1a, 0x0e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x22, 0x00, 0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x70, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6f,
	0x2d, 0x61, 0x70, 0x70, 0x2d, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x77, 0x61, 0x6c, 0x6c, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_models_proto_rawDescOnce sync.Once
	file_models_proto_rawDescData = file_models_proto_rawDesc
)

func file_models_proto_rawDescGZIP() []byte {
	file_models_proto_rawDescOnce.Do(func() {
		file_models_proto_rawDescData = protoimpl.X.CompressGZIP(file_models_proto_rawDescData)
	})
	return file_models_proto_rawDescData
}

var file_models_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_models_proto_goTypes = []interface{}{
	(*Ticker)(nil),               // 0: models.Ticker
	(*Agg)(nil),                  // 1: models.Agg
	(*PriceUpdate)(nil),          // 2: models.PriceUpdate
	(*Announcement)(nil),         // 3: models.Announcement
	(*Screen)(nil),               // 4: models.Screen
	(*ScreenCluster)(nil),        // 5: models.ScreenCluster
	(*PresentationSettings)(nil), // 6: models.PresentationSettings
	(*Update)(nil),               // 7: models.Update
	(*RGBA)(nil),                 // 8: models.RGBA
	(*Tickers)(nil),              // 9: models.Tickers
	(*Empty)(nil),                // 10: models.Empty
}
var file_models_proto_depIdxs = []int32{
	1,  // 0: models.Ticker.Aggs:type_name -> models.Agg
	6,  // 1: models.ScreenCluster.Settings:type_name -> models.PresentationSettings
	4,  // 2: models.ScreenCluster.Screens:type_name -> models.Screen
	8,  // 3: models.PresentationSettings.UpColor:type_name -> models.RGBA
	8,  // 4: models.PresentationSettings.DownColor:type_name -> models.RGBA
	8,  // 5: models.PresentationSettings.BGColor:type_name -> models.RGBA
	8,  // 6: models.PresentationSettings.FontColor:type_name -> models.RGBA
	8,  // 7: models.PresentationSettings.TickerBoxBGColor:type_name -> models.RGBA
	2,  // 8: models.Update.PriceUpdate:type_name -> models.PriceUpdate
	3,  // 9: models.Update.Announcement:type_name -> models.Announcement
	5,  // 10: models.Update.ScreenCluster:type_name -> models.ScreenCluster
	0,  // 11: models.Update.Ticker:type_name -> models.Ticker
	6,  // 12: models.Update.PresentationSettings:type_name -> models.PresentationSettings
	0,  // 13: models.Tickers.Tickers:type_name -> models.Ticker
	4,  // 14: models.Leader.JoinCluster:input_type -> models.Screen
	10, // 15: models.Leader.GetTickers:input_type -> models.Empty
	6,  // 16: models.Leader.UpdatePresentationSettings:input_type -> models.PresentationSettings
	3,  // 17: models.Leader.Announce:input_type -> models.Announcement
	10, // 18: models.Leader.GetScreenCluster:input_type -> models.Empty
	4,  // 19: models.Leader.UpdateScreen:input_type -> models.Screen
	7,  // 20: models.Leader.JoinCluster:output_type -> models.Update
	9,  // 21: models.Leader.GetTickers:output_type -> models.Tickers
	6,  // 22: models.Leader.UpdatePresentationSettings:output_type -> models.PresentationSettings
	3,  // 23: models.Leader.Announce:output_type -> models.Announcement
	5,  // 24: models.Leader.GetScreenCluster:output_type -> models.ScreenCluster
	4,  // 25: models.Leader.UpdateScreen:output_type -> models.Screen
	20, // [20:26] is the sub-list for method output_type
	14, // [14:20] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_models_proto_init() }
func file_models_proto_init() {
	if File_models_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_models_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ticker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Agg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Announcement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Screen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScreenCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PresentationSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Update); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RGBA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tickers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_models_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_models_proto_goTypes,
		DependencyIndexes: file_models_proto_depIdxs,
		MessageInfos:      file_models_proto_msgTypes,
	}.Build()
	File_models_proto = out.File
	file_models_proto_rawDesc = nil
	file_models_proto_goTypes = nil
	file_models_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LeaderClient is the client API for Leader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LeaderClient interface {
	// Join the screen cluster. Updates to the cluster will be streamed to clients.
	JoinCluster(ctx context.Context, in *Screen, opts ...grpc.CallOption) (Leader_JoinClusterClient, error)
	// Get our current list of tickers.
	GetTickers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Tickers, error)
	// Update our presentation settings.
	UpdatePresentationSettings(ctx context.Context, in *PresentationSettings, opts ...grpc.CallOption) (*PresentationSettings, error)
	// Announce a new message
	Announce(ctx context.Context, in *Announcement, opts ...grpc.CallOption) (*Announcement, error)
	// Get our current screen cluster.
	GetScreenCluster(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ScreenCluster, error)
	// UpdateScreen allows a screen to update it's details after it's started and joined.
	UpdateScreen(ctx context.Context, in *Screen, opts ...grpc.CallOption) (*Screen, error)
}

type leaderClient struct {
	cc grpc.ClientConnInterface
}

func NewLeaderClient(cc grpc.ClientConnInterface) LeaderClient {
	return &leaderClient{cc}
}

func (c *leaderClient) JoinCluster(ctx context.Context, in *Screen, opts ...grpc.CallOption) (Leader_JoinClusterClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Leader_serviceDesc.Streams[0], "/models.Leader/JoinCluster", opts...)
	if err != nil {
		return nil, err
	}
	x := &leaderJoinClusterClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Leader_JoinClusterClient interface {
	Recv() (*Update, error)
	grpc.ClientStream
}

type leaderJoinClusterClient struct {
	grpc.ClientStream
}

func (x *leaderJoinClusterClient) Recv() (*Update, error) {
	m := new(Update)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *leaderClient) GetTickers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Tickers, error) {
	out := new(Tickers)
	err := c.cc.Invoke(ctx, "/models.Leader/GetTickers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderClient) UpdatePresentationSettings(ctx context.Context, in *PresentationSettings, opts ...grpc.CallOption) (*PresentationSettings, error) {
	out := new(PresentationSettings)
	err := c.cc.Invoke(ctx, "/models.Leader/UpdatePresentationSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderClient) Announce(ctx context.Context, in *Announcement, opts ...grpc.CallOption) (*Announcement, error) {
	out := new(Announcement)
	err := c.cc.Invoke(ctx, "/models.Leader/Announce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderClient) GetScreenCluster(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ScreenCluster, error) {
	out := new(ScreenCluster)
	err := c.cc.Invoke(ctx, "/models.Leader/GetScreenCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderClient) UpdateScreen(ctx context.Context, in *Screen, opts ...grpc.CallOption) (*Screen, error) {
	out := new(Screen)
	err := c.cc.Invoke(ctx, "/models.Leader/UpdateScreen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeaderServer is the server API for Leader service.
type LeaderServer interface {
	// Join the screen cluster. Updates to the cluster will be streamed to clients.
	JoinCluster(*Screen, Leader_JoinClusterServer) error
	// Get our current list of tickers.
	GetTickers(context.Context, *Empty) (*Tickers, error)
	// Update our presentation settings.
	UpdatePresentationSettings(context.Context, *PresentationSettings) (*PresentationSettings, error)
	// Announce a new message
	Announce(context.Context, *Announcement) (*Announcement, error)
	// Get our current screen cluster.
	GetScreenCluster(context.Context, *Empty) (*ScreenCluster, error)
	// UpdateScreen allows a screen to update it's details after it's started and joined.
	UpdateScreen(context.Context, *Screen) (*Screen, error)
}

// UnimplementedLeaderServer can be embedded to have forward compatible implementations.
type UnimplementedLeaderServer struct {
}

func (*UnimplementedLeaderServer) JoinCluster(*Screen, Leader_JoinClusterServer) error {
	return status.Errorf(codes.Unimplemented, "method JoinCluster not implemented")
}
func (*UnimplementedLeaderServer) GetTickers(context.Context, *Empty) (*Tickers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTickers not implemented")
}
func (*UnimplementedLeaderServer) UpdatePresentationSettings(context.Context, *PresentationSettings) (*PresentationSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePresentationSettings not implemented")
}
func (*UnimplementedLeaderServer) Announce(context.Context, *Announcement) (*Announcement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Announce not implemented")
}
func (*UnimplementedLeaderServer) GetScreenCluster(context.Context, *Empty) (*ScreenCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScreenCluster not implemented")
}
func (*UnimplementedLeaderServer) UpdateScreen(context.Context, *Screen) (*Screen, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScreen not implemented")
}

func RegisterLeaderServer(s *grpc.Server, srv LeaderServer) {
	s.RegisterService(&_Leader_serviceDesc, srv)
}

func _Leader_JoinCluster_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Screen)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LeaderServer).JoinCluster(m, &leaderJoinClusterServer{stream})
}

type Leader_JoinClusterServer interface {
	Send(*Update) error
	grpc.ServerStream
}

type leaderJoinClusterServer struct {
	grpc.ServerStream
}

func (x *leaderJoinClusterServer) Send(m *Update) error {
	return x.ServerStream.SendMsg(m)
}

func _Leader_GetTickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderServer).GetTickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.Leader/GetTickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderServer).GetTickers(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Leader_UpdatePresentationSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PresentationSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderServer).UpdatePresentationSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.Leader/UpdatePresentationSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderServer).UpdatePresentationSettings(ctx, req.(*PresentationSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _Leader_Announce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Announcement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderServer).Announce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.Leader/Announce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderServer).Announce(ctx, req.(*Announcement))
	}
	return interceptor(ctx, in, info, handler)
}

func _Leader_GetScreenCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderServer).GetScreenCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.Leader/GetScreenCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderServer).GetScreenCluster(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Leader_UpdateScreen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Screen)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderServer).UpdateScreen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.Leader/UpdateScreen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderServer).UpdateScreen(ctx, req.(*Screen))
	}
	return interceptor(ctx, in, info, handler)
}

var _Leader_serviceDesc = grpc.ServiceDesc{
	ServiceName: "models.Leader",
	HandlerType: (*LeaderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTickers",
			Handler:    _Leader_GetTickers_Handler,
		},
		{
			MethodName: "UpdatePresentationSettings",
			Handler:    _Leader_UpdatePresentationSettings_Handler,
		},
		{
			MethodName: "Announce",
			Handler:    _Leader_Announce_Handler,
		},
		{
			MethodName: "GetScreenCluster",
			Handler:    _Leader_GetScreenCluster_Handler,
		},
		{
			MethodName: "UpdateScreen",
			Handler:    _Leader_UpdateScreen_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "JoinCluster",
			Handler:       _Leader_JoinCluster_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "models.proto",
}
