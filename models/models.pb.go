// Code generated by protoc-gen-go. DO NOT EDIT.
// source: models.proto

package models

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Ticker is used to update a tickers information ( leader -> follower ).
type Ticker struct {
	Ticker                string   `protobuf:"bytes,1,opt,name=Ticker,proto3" json:"Ticker,omitempty"`
	CompanyName           string   `protobuf:"bytes,2,opt,name=CompanyName,proto3" json:"CompanyName,omitempty"`
	Price                 float64  `protobuf:"fixed64,3,opt,name=Price,proto3" json:"Price,omitempty"`
	PriceChangePercentage float64  `protobuf:"fixed64,4,opt,name=PriceChangePercentage,proto3" json:"PriceChangePercentage,omitempty"`
	PreviousClosePrice    float64  `protobuf:"fixed64,5,opt,name=PreviousClosePrice,proto3" json:"PreviousClosePrice,omitempty"`
	Index                 int32    `protobuf:"varint,6,opt,name=Index,proto3" json:"Index,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *Ticker) Reset()         { *m = Ticker{} }
func (m *Ticker) String() string { return proto.CompactTextString(m) }
func (*Ticker) ProtoMessage()    {}
func (*Ticker) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5431a010549573, []int{0}
}

func (m *Ticker) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ticker.Unmarshal(m, b)
}
func (m *Ticker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ticker.Marshal(b, m, deterministic)
}
func (m *Ticker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ticker.Merge(m, src)
}
func (m *Ticker) XXX_Size() int {
	return xxx_messageInfo_Ticker.Size(m)
}
func (m *Ticker) XXX_DiscardUnknown() {
	xxx_messageInfo_Ticker.DiscardUnknown(m)
}

var xxx_messageInfo_Ticker proto.InternalMessageInfo

func (m *Ticker) GetTicker() string {
	if m != nil {
		return m.Ticker
	}
	return ""
}

func (m *Ticker) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

func (m *Ticker) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Ticker) GetPriceChangePercentage() float64 {
	if m != nil {
		return m.PriceChangePercentage
	}
	return 0
}

func (m *Ticker) GetPreviousClosePrice() float64 {
	if m != nil {
		return m.PreviousClosePrice
	}
	return 0
}

func (m *Ticker) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type Tickers struct {
	Tickers              []*Ticker `protobuf:"bytes,1,rep,name=Tickers,proto3" json:"Tickers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Tickers) Reset()         { *m = Tickers{} }
func (m *Tickers) String() string { return proto.CompactTextString(m) }
func (*Tickers) ProtoMessage()    {}
func (*Tickers) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5431a010549573, []int{1}
}

func (m *Tickers) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tickers.Unmarshal(m, b)
}
func (m *Tickers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tickers.Marshal(b, m, deterministic)
}
func (m *Tickers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tickers.Merge(m, src)
}
func (m *Tickers) XXX_Size() int {
	return xxx_messageInfo_Tickers.Size(m)
}
func (m *Tickers) XXX_DiscardUnknown() {
	xxx_messageInfo_Tickers.DiscardUnknown(m)
}

var xxx_messageInfo_Tickers proto.InternalMessageInfo

func (m *Tickers) GetTickers() []*Ticker {
	if m != nil {
		return m.Tickers
	}
	return nil
}

// Update is a generalized container for all update types.
type Update struct {
	// Defines which type of update this is.
	UpdateType int32 `protobuf:"varint,1,opt,name=UpdateType,proto3" json:"UpdateType,omitempty"`
	// Screen Cluster Information.
	ScreenCluster *ScreenCluster `protobuf:"bytes,2,opt,name=ScreenCluster,proto3" json:"ScreenCluster,omitempty"`
	// Ticker Update Information.
	Ticker               *Ticker  `protobuf:"bytes,3,opt,name=Ticker,proto3" json:"Ticker,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Update) Reset()         { *m = Update{} }
func (m *Update) String() string { return proto.CompactTextString(m) }
func (*Update) ProtoMessage()    {}
func (*Update) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5431a010549573, []int{2}
}

func (m *Update) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Update.Unmarshal(m, b)
}
func (m *Update) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Update.Marshal(b, m, deterministic)
}
func (m *Update) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Update.Merge(m, src)
}
func (m *Update) XXX_Size() int {
	return xxx_messageInfo_Update.Size(m)
}
func (m *Update) XXX_DiscardUnknown() {
	xxx_messageInfo_Update.DiscardUnknown(m)
}

var xxx_messageInfo_Update proto.InternalMessageInfo

func (m *Update) GetUpdateType() int32 {
	if m != nil {
		return m.UpdateType
	}
	return 0
}

func (m *Update) GetScreenCluster() *ScreenCluster {
	if m != nil {
		return m.ScreenCluster
	}
	return nil
}

func (m *Update) GetTicker() *Ticker {
	if m != nil {
		return m.Ticker
	}
	return nil
}

// Screen contains all screen information about an individual screen.
type Screen struct {
	Width                int32    `protobuf:"varint,1,opt,name=Width,proto3" json:"Width,omitempty"`
	Height               int32    `protobuf:"varint,2,opt,name=Height,proto3" json:"Height,omitempty"`
	Index                int32    `protobuf:"varint,3,opt,name=Index,proto3" json:"Index,omitempty"`
	ScreenGlobalOffset   int64    `protobuf:"varint,4,opt,name=ScreenGlobalOffset,proto3" json:"ScreenGlobalOffset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Screen) Reset()         { *m = Screen{} }
func (m *Screen) String() string { return proto.CompactTextString(m) }
func (*Screen) ProtoMessage()    {}
func (*Screen) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5431a010549573, []int{3}
}

func (m *Screen) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Screen.Unmarshal(m, b)
}
func (m *Screen) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Screen.Marshal(b, m, deterministic)
}
func (m *Screen) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Screen.Merge(m, src)
}
func (m *Screen) XXX_Size() int {
	return xxx_messageInfo_Screen.Size(m)
}
func (m *Screen) XXX_DiscardUnknown() {
	xxx_messageInfo_Screen.DiscardUnknown(m)
}

var xxx_messageInfo_Screen proto.InternalMessageInfo

func (m *Screen) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *Screen) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Screen) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Screen) GetScreenGlobalOffset() int64 {
	if m != nil {
		return m.ScreenGlobalOffset
	}
	return 0
}

// ScreenCluster contains information about the whole screen cluster.
type ScreenCluster struct {
	NumberOfScreens      int32     `protobuf:"varint,1,opt,name=NumberOfScreens,proto3" json:"NumberOfScreens,omitempty"`
	TickerBoxWidth       int32     `protobuf:"varint,2,opt,name=TickerBoxWidth,proto3" json:"TickerBoxWidth,omitempty"`
	GlobalViewportSize   int64     `protobuf:"varint,3,opt,name=GlobalViewportSize,proto3" json:"GlobalViewportSize,omitempty"`
	ScrollSpeed          int32     `protobuf:"varint,4,opt,name=ScrollSpeed,proto3" json:"ScrollSpeed,omitempty"`
	Screens              []*Screen `protobuf:"bytes,5,rep,name=Screens,proto3" json:"Screens,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ScreenCluster) Reset()         { *m = ScreenCluster{} }
func (m *ScreenCluster) String() string { return proto.CompactTextString(m) }
func (*ScreenCluster) ProtoMessage()    {}
func (*ScreenCluster) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5431a010549573, []int{4}
}

func (m *ScreenCluster) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScreenCluster.Unmarshal(m, b)
}
func (m *ScreenCluster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScreenCluster.Marshal(b, m, deterministic)
}
func (m *ScreenCluster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScreenCluster.Merge(m, src)
}
func (m *ScreenCluster) XXX_Size() int {
	return xxx_messageInfo_ScreenCluster.Size(m)
}
func (m *ScreenCluster) XXX_DiscardUnknown() {
	xxx_messageInfo_ScreenCluster.DiscardUnknown(m)
}

var xxx_messageInfo_ScreenCluster proto.InternalMessageInfo

func (m *ScreenCluster) GetNumberOfScreens() int32 {
	if m != nil {
		return m.NumberOfScreens
	}
	return 0
}

func (m *ScreenCluster) GetTickerBoxWidth() int32 {
	if m != nil {
		return m.TickerBoxWidth
	}
	return 0
}

func (m *ScreenCluster) GetGlobalViewportSize() int64 {
	if m != nil {
		return m.GlobalViewportSize
	}
	return 0
}

func (m *ScreenCluster) GetScrollSpeed() int32 {
	if m != nil {
		return m.ScrollSpeed
	}
	return 0
}

func (m *ScreenCluster) GetScreens() []*Screen {
	if m != nil {
		return m.Screens
	}
	return nil
}

func init() {
	proto.RegisterType((*Ticker)(nil), "models.Ticker")
	proto.RegisterType((*Tickers)(nil), "models.Tickers")
	proto.RegisterType((*Update)(nil), "models.Update")
	proto.RegisterType((*Screen)(nil), "models.Screen")
	proto.RegisterType((*ScreenCluster)(nil), "models.ScreenCluster")
}

func init() { proto.RegisterFile("models.proto", fileDescriptor_0b5431a010549573) }

var fileDescriptor_0b5431a010549573 = []byte{
	// 460 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x53, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xed, 0x62, 0x6c, 0xc4, 0x04, 0x5a, 0xb4, 0xa2, 0xc8, 0x02, 0x09, 0x59, 0x3e, 0x54, 0x3e,
	0x05, 0x94, 0x72, 0xe3, 0x54, 0x22, 0x51, 0x90, 0xaa, 0x36, 0xda, 0x14, 0x7a, 0x76, 0xec, 0x49,
	0x62, 0xb1, 0xf1, 0x5a, 0xbb, 0x1b, 0x68, 0x11, 0x67, 0x6e, 0xfc, 0x1d, 0x57, 0xfe, 0x05, 0xed,
	0x8e, 0x9d, 0x26, 0x56, 0x6e, 0x33, 0xef, 0xed, 0xcc, 0xbe, 0x79, 0xb3, 0x0b, 0x4f, 0x56, 0xaa,
	0x44, 0x69, 0x86, 0x8d, 0x56, 0x56, 0xf1, 0x88, 0xb2, 0xf4, 0x2f, 0x83, 0xe8, 0xba, 0x2a, 0xbe,
	0xa1, 0xe6, 0x2f, 0xba, 0x28, 0x66, 0x09, 0xcb, 0x1e, 0x8b, 0x0e, 0x4f, 0x60, 0x30, 0x56, 0xab,
	0x26, 0xaf, 0xef, 0x2e, 0xf3, 0x15, 0xc6, 0x0f, 0x3c, 0xb9, 0x0d, 0xf1, 0xe7, 0x10, 0x4e, 0x74,
	0x55, 0x60, 0x1c, 0x24, 0x2c, 0x63, 0x82, 0x12, 0xfe, 0x0e, 0x8e, 0x7d, 0x30, 0x5e, 0xe6, 0xf5,
	0x02, 0x27, 0xa8, 0x0b, 0xac, 0x6d, 0xbe, 0xc0, 0xf8, 0xa1, 0x3f, 0xb5, 0x9f, 0xe4, 0x43, 0xe0,
	0x13, 0x8d, 0xdf, 0x2b, 0xb5, 0x36, 0x63, 0xa9, 0x0c, 0x52, 0xe3, 0xd0, 0x97, 0xec, 0x61, 0xdc,
	0xdd, 0x9f, 0xeb, 0x12, 0x6f, 0xe3, 0x28, 0x61, 0x59, 0x28, 0x28, 0x49, 0x4f, 0xe1, 0x11, 0xa9,
	0x37, 0x3c, 0xdb, 0x84, 0x31, 0x4b, 0x82, 0x6c, 0x30, 0x3a, 0x1c, 0xb6, 0x4e, 0x10, 0x2c, 0x3a,
	0x3a, 0xfd, 0xc3, 0x20, 0xfa, 0xd2, 0x94, 0xb9, 0x45, 0xfe, 0x1a, 0x80, 0xa2, 0xeb, 0xbb, 0x06,
	0xbd, 0x1f, 0xa1, 0xd8, 0x42, 0xf8, 0x7b, 0x78, 0x3a, 0x2d, 0x34, 0x62, 0x3d, 0x96, 0x6b, 0x63,
	0x51, 0x7b, 0x57, 0x06, 0xa3, 0xe3, 0xae, 0xf5, 0x0e, 0x29, 0x76, 0xcf, 0xf2, 0x93, 0x8d, 0xd1,
	0x81, 0xaf, 0xea, 0x0b, 0x6a, 0xd9, 0xf4, 0x17, 0x44, 0x54, 0xe8, 0x86, 0xbc, 0xa9, 0x4a, 0xbb,
	0x6c, 0x95, 0x50, 0xe2, 0x16, 0xf6, 0x09, 0xab, 0xc5, 0xd2, 0xfa, 0xdb, 0x43, 0xd1, 0x66, 0xf7,
	0x96, 0x04, 0x5b, 0x96, 0x38, 0x63, 0xa9, 0xdb, 0xb9, 0x54, 0xb3, 0x5c, 0x5e, 0xcd, 0xe7, 0x06,
	0xad, 0xdf, 0x45, 0x20, 0xf6, 0x30, 0xe9, 0x3f, 0xd6, 0x9b, 0x91, 0x67, 0x70, 0x74, 0xb9, 0x5e,
	0xcd, 0x50, 0x5f, 0xcd, 0x89, 0x30, 0xad, 0x9e, 0x3e, 0xcc, 0x4f, 0xe0, 0x90, 0x66, 0xf8, 0xa0,
	0x6e, 0x49, 0x38, 0x29, 0xec, 0xa1, 0x4e, 0x13, 0xdd, 0xf9, 0xb5, 0xc2, 0x1f, 0x8d, 0xd2, 0x76,
	0x5a, 0xfd, 0xa4, 0x57, 0x14, 0x88, 0x3d, 0x8c, 0x7b, 0x8a, 0xd3, 0x42, 0x2b, 0x29, 0xa7, 0x0d,
	0x62, 0xe9, 0xc5, 0x87, 0x62, 0x1b, 0x72, 0xdb, 0xee, 0xb4, 0x85, 0xbb, 0xdb, 0x26, 0x58, 0x74,
	0xf4, 0xe8, 0x37, 0x83, 0x67, 0x24, 0xe7, 0x26, 0x97, 0xf2, 0x02, 0xf3, 0x12, 0x35, 0x3f, 0x83,
	0x57, 0x02, 0x17, 0x95, 0x1b, 0xf7, 0xac, 0x2e, 0x2f, 0x5c, 0x50, 0x7f, 0x54, 0x9a, 0x36, 0x6f,
	0x78, 0xaf, 0xd9, 0xcb, 0x4d, 0x4e, 0x07, 0xd2, 0x83, 0xb7, 0x8c, 0xbf, 0x01, 0x38, 0x47, 0xdb,
	0xbd, 0xbe, 0x7e, 0xc5, 0xd1, 0xee, 0xae, 0x4d, 0x7a, 0x30, 0x8b, 0xfc, 0x8f, 0x3c, 0xfd, 0x1f,
	0x00, 0x00, 0xff, 0xff, 0x61, 0x66, 0x0f, 0x7c, 0xa1, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TickerWallLeaderClient is the client API for TickerWallLeader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TickerWallLeaderClient interface {
	// Register our screen and listen for update events.
	RegisterAndListenForUpdates(ctx context.Context, in *Screen, opts ...grpc.CallOption) (TickerWallLeader_RegisterAndListenForUpdatesClient, error)
	// Get our current list of tickers.
	GetTickers(ctx context.Context, in *Screen, opts ...grpc.CallOption) (*Tickers, error)
}

type tickerWallLeaderClient struct {
	cc *grpc.ClientConn
}

func NewTickerWallLeaderClient(cc *grpc.ClientConn) TickerWallLeaderClient {
	return &tickerWallLeaderClient{cc}
}

func (c *tickerWallLeaderClient) RegisterAndListenForUpdates(ctx context.Context, in *Screen, opts ...grpc.CallOption) (TickerWallLeader_RegisterAndListenForUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TickerWallLeader_serviceDesc.Streams[0], "/models.TickerWallLeader/RegisterAndListenForUpdates", opts...)
	if err != nil {
		return nil, err
	}
	x := &tickerWallLeaderRegisterAndListenForUpdatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TickerWallLeader_RegisterAndListenForUpdatesClient interface {
	Recv() (*Update, error)
	grpc.ClientStream
}

type tickerWallLeaderRegisterAndListenForUpdatesClient struct {
	grpc.ClientStream
}

func (x *tickerWallLeaderRegisterAndListenForUpdatesClient) Recv() (*Update, error) {
	m := new(Update)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tickerWallLeaderClient) GetTickers(ctx context.Context, in *Screen, opts ...grpc.CallOption) (*Tickers, error) {
	out := new(Tickers)
	err := c.cc.Invoke(ctx, "/models.TickerWallLeader/GetTickers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TickerWallLeaderServer is the server API for TickerWallLeader service.
type TickerWallLeaderServer interface {
	// Register our screen and listen for update events.
	RegisterAndListenForUpdates(*Screen, TickerWallLeader_RegisterAndListenForUpdatesServer) error
	// Get our current list of tickers.
	GetTickers(context.Context, *Screen) (*Tickers, error)
}

// UnimplementedTickerWallLeaderServer can be embedded to have forward compatible implementations.
type UnimplementedTickerWallLeaderServer struct {
}

func (*UnimplementedTickerWallLeaderServer) RegisterAndListenForUpdates(req *Screen, srv TickerWallLeader_RegisterAndListenForUpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method RegisterAndListenForUpdates not implemented")
}
func (*UnimplementedTickerWallLeaderServer) GetTickers(ctx context.Context, req *Screen) (*Tickers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTickers not implemented")
}

func RegisterTickerWallLeaderServer(s *grpc.Server, srv TickerWallLeaderServer) {
	s.RegisterService(&_TickerWallLeader_serviceDesc, srv)
}

func _TickerWallLeader_RegisterAndListenForUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Screen)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TickerWallLeaderServer).RegisterAndListenForUpdates(m, &tickerWallLeaderRegisterAndListenForUpdatesServer{stream})
}

type TickerWallLeader_RegisterAndListenForUpdatesServer interface {
	Send(*Update) error
	grpc.ServerStream
}

type tickerWallLeaderRegisterAndListenForUpdatesServer struct {
	grpc.ServerStream
}

func (x *tickerWallLeaderRegisterAndListenForUpdatesServer) Send(m *Update) error {
	return x.ServerStream.SendMsg(m)
}

func _TickerWallLeader_GetTickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Screen)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TickerWallLeaderServer).GetTickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.TickerWallLeader/GetTickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TickerWallLeaderServer).GetTickers(ctx, req.(*Screen))
	}
	return interceptor(ctx, in, info, handler)
}

var _TickerWallLeader_serviceDesc = grpc.ServiceDesc{
	ServiceName: "models.TickerWallLeader",
	HandlerType: (*TickerWallLeaderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTickers",
			Handler:    _TickerWallLeader_GetTickers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RegisterAndListenForUpdates",
			Handler:       _TickerWallLeader_RegisterAndListenForUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "models.proto",
}
